{"version":3,"file":"UserRepository.js","sourceRoot":"","sources":["../../../src/data/UserRepository.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,qCAA+E;AAC/E,mCAA+B;AAC/B,sDAAiD;AACjD,8DAAyD;AACzD,iDAA4C;AAC5C,2DAAsD;AAItD,IAAa,cAAc,GAA3B,oBAA4B,SAAQ,oBAAsB;IAE/C,iBAAiB,CAAC,WAAmB;QACxC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC;IACvC,CAAC;IAGY,eAAe,CAAC,IAAqB;;YAC9C,IAAI,UAAU,GAAG,IAAI,uBAAU,EAAE,CAAC;YAClC,UAAU,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAClC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAC5B,MAAM,gBAAgB,GAAG,qBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/D,UAAU,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;YAChD,UAAU,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC;YAClD,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YAC1C,UAAU,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAEpC,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAE/B,MAAM,CAAC,UAAU,CAAC;QAEtB,CAAC;KAAA;IAGY,eAAe,CAAC,IAAgB;;YACzC,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA;IAGY,uBAAuB,CAAC,YAAoB;;YACrD,MAAM,IAAI,GAAG,IAAI,uBAAU,EAAE,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;YAChC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;YAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAE9B,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE7B,CAAC;KAAA;IAGY,kBAAkB,CAAC,IAAgB,EAAE,WAAmB;;YACjE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAC,MAAM,IAAI,6BAAa,CAAC,QAAQ,CAAC,CAAC;YAE9C,MAAM,gBAAgB,GAAG,qBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/D,IAAI,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;YAC1C,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC;YAC5C,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;KAAA;CACJ,CAAA;AAzCG;IADC,kCAAwB,EAAE;;qCACQ,iCAAe;;qDAcjD;AAGD;IADC,kCAAwB,EAAE;;qCACQ,uBAAU;;qDAE5C;AAGD;IADC,kCAAwB,EAAE;;;;6DAS1B;AAGD;IADC,kCAAwB,EAAE;;qCACW,uBAAU;;wDAO/C;AA/CQ,cAAc;IAF1B,gBAAO,EAAE;IACT,0BAAgB,CAAC,uBAAU,CAAC;GAChB,cAAc,CAgD1B;AAhDY,wCAAc","sourcesContent":["import {Repository, EntityRepository, TransactionEntityManager} from \"typeorm\";\nimport {Service} from \"typedi\";\nimport {UserEntity} from \"./entities/UserEntity\";\nimport {CreateUserModel} from \"./models/CreateUserModel\";\nimport {UserUtils} from \"./utils/UserUtils\";\nimport {RedSightError} from \"../common/RedSightError\";\n\n@Service()\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository<UserEntity> {\n\n    public findByPhoneNumber(phoneNumber: string): Promise<UserEntity> {\n        return this.findOne({phoneNumber});\n    }\n\n    @TransactionEntityManager()\n    public async createUserAsync(user: CreateUserModel): Promise<UserEntity> {\n        let userEntity = new UserEntity();\n        userEntity.createdAt = new Date();\n        userEntity.name = user.name;\n        const passwordWithSalt = UserUtils.signPassword(user.password);\n        userEntity.password = passwordWithSalt.password;\n        userEntity.passwordFormat = passwordWithSalt.salt;\n        userEntity.phoneNumber = user.phoneNumber;\n        userEntity.lastLoginAt = new Date();\n\n        await this.persist(userEntity);\n\n        return userEntity;\n\n    }\n\n    @TransactionEntityManager()\n    public async updateUserAsync(user: UserEntity): Promise<void> {\n        await this.persist(user);\n    }\n\n    @TransactionEntityManager()\n    public async createUserByPhoneNumber(phoneNnumber: string) {\n        const user = new UserEntity();\n        user.phoneNumber = phoneNnumber;\n        user.createdAt = new Date();\n        user.lastLoginAt = new Date();\n\n        await this.persist(user);\n\n    }\n\n    @TransactionEntityManager()\n    public async resetPasswordAsync(user: UserEntity, newPassword: string) {\n        if (!!user) throw new RedSightError(\"用户不能为空\");\n\n        const passwordWithSalt = UserUtils.signPassword(user.password);\n        user.password = passwordWithSalt.password;\n        user.passwordFormat = passwordWithSalt.salt;\n        await this.persist(user);\n    }\n}"]}