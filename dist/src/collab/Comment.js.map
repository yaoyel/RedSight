{"version":3,"file":"Comment.js","sourceRoot":"","sources":["../../../src/collab/Comment.ts"],"names":[],"mappings":"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","sourcesContent":["class Comment {\n    from: string;\n    to: string;\n    text: string;\n    id: string;\n\n    constructor(from: string, to: string, text: string, id: string) {\n        this.from = from;\n        this.to = to;\n        this.text = text;\n        this.id = id;\n    }\n\n    static fromJson(json: any) {\n        return new Comment(json.from, json.to, json.text, json.id);\n    }\n}\n\nclass Comments {\n    comments: Comment[];\n    events: any[];\n    version: number;\n\n    constructor(comments: any = []) {\n        this.comments = comments;\n        this.events = [];\n        this.version = 0;\n    }\n\n    mapThrough(mapping: any) {\n        for (let i = this.comments.length - 1; i >= 0; i--) {\n            let comment = <Comment>this.comments[i];\n            let from = mapping.map(comment.from, 1);\n            let to = mapping.map(comment.to, -1);\n            if (from >= to) {\n                this.comments.splice(i, 1);\n            } else {\n                comment.from = from;\n                comment.to = to;\n            }\n        }\n    }\n\n    create(data: Comment) {\n        this.comments.push(data);\n        this.events.push({type: \"create\", id: data.id});\n        this.version++;\n    }\n\n    index(id: string): number | null {\n        this.comments.map((v, i) => {\n            if (v.id === id)\n                return i;\n        })\n        return null;\n    }\n\n    delete(id: string) {\n        let found = this.index(id);\n        if (found !== null) {\n            this.comments.splice(found, 1);\n            this.version++;\n            this.events.push({type: \"delete\", id: id});\n            return;\n        }\n    }\n\n    eventsAfter(startIndex: number) {\n        let result = [];\n        for (let i = startIndex; i < this.events.length; i++) {\n            let event = this.events[i];\n            if (event.type === \"delete\") {\n                result.push(event);\n            } else {\n                let found = this.index(event.id);\n                if (found != null) {\n                    let comment = this.comments[found];\n                    result.push({\n                        type: \"create\",\n                        id: event.id,\n                        text: comment.text,\n                        from: comment.from,\n                        to: comment.to\n                    });\n                }\n            }\n        }\n        return result;\n    }\n\n}\n\n\nexport {Comment, Comments};"]}