{"version":3,"file":"app.js","sourceRoot":"","sources":["../app.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4BAA0B;AAC1B,6DAA8F;AAC9F,mCAAiC;AACjC,qCAA0E;AAC1E,4CAA4C;AAC5C,gDAA2F;AAC3F,oCAAkC;AAClC,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,UAAU,CAAC;AACzC,iCAAkC;AAClC,mCAAiC;AACjC,+DAA0D;AAC1D,8EAAyE;AACzE,kCAAgB,CAAC,kBAAS,CAAC,CAAC;AAC5B,sBAAe,CAAC,kBAAS,CAAC,CAAC;AAC3B,kBAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;AAEhC,0BAAgB,CAAC;IACb,MAAM,EAAE;QACJ,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9B,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC;QAC9B,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACtC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACtC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC;KACzC;IACD,8BAA8B;IAE9B,cAAc,EAAE,IAAI;IACpB,QAAQ,EAAE,CAAC,uBAAU,CAAC;CAEzB,CAAC,CAAC,IAAI,CAAC,CAAM,OAAO;IACjB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;AACtC,CAAC,CAAA,CAAC,CAAC;AAEU,QAAA,UAAU,GAAG;IACtB,mBAAmB,EAAE,KAAK;IAC1B,IAAI,EAAE,IAAI;IACV,gBAAgB,EAAE,IAAI;IACtB,kBAAkB,EAAE,CAAO,MAAc,EAAE,KAAW;QAClD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAExB,IAAI,WAAW,GAAG,MAAM,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QACpD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;IAE5B,CAAC,CAAA;IACD,oBAAoB,EAAE,CAAO,MAAc,EAAE,KAAe;QACxD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;YACP,MAAM,CAAC,KAAK,CAAC;QAEjB,MAAM,CAAC,MAAM,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC,CAAA;IAED,WAAW,EAAE;QACT,iCAAe;QACjB,mBAAmB;QACjB,iBAAc;QACd,mBAAgB;KACnB;CAEJ,CAAC;AAEF,MAAM,MAAM,GAAG,qCAAe,CAAC,kBAAU,CAAC,CAAC;AAG3C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAEpB,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC","sourcesContent":["import \"reflect-metadata\";\nimport {createKoaServer, useContainer as routingContainer, Action} from \"routing-controllers\";\nimport {Container} from \"typedi\";\nimport {createConnection, useContainer as ormUseContainer} from \"typeorm\";\nimport * as Utils from \"./src/webapi/utils\";\nimport {UserController, AuthController, CollabController} from \"./src/webapi/controllers/\";\nimport \"./src/webapi/middlewares\";\nprocess.env.NODE_CONFIG_DIR = \"./config\";\nimport  * as config from \"config\";\nimport \"./src/common/HttpHelper\";\nimport {UserEntity} from \"./src/data/entities/UserEntity\";\nimport {DummyController} from \"./src/webapi/controllers/DummyController\";\nroutingContainer(Container);\normUseContainer(Container);\nContainer.set(\"config\", config);\n\ncreateConnection({\n    driver: {\n        type: \"mysql\",\n        host: config.get(\"Mysql.host\"),\n        port: config.get(\"Mysql.port\"),\n        database: config.get(\"Mysql.database\"),\n        username: config.get(\"Mysql.username\"),\n        password: config.get(\"Mysql.password\")\n    },\n    // logger: [\"query\", \"error\"],\n\n    autoSchemaSync: true,\n    entities: [UserEntity]\n\n}).then(async connect => {\n    console.log(\"mysql is connected\");\n});\n\nexport const koaOptions = {\n    defaultErrorHandler: false,\n    cors: true,\n    classTransformer: true,\n    currentUserChecker: async (action: Action, value?: any) => {\n        const token = action.request.headers[\"authorization\"];\n\n        if (!token) return null;\n\n        let decodeToken = await Utils.verifyJwtAsync(token);\n        return decodeToken.data;\n\n    },\n    authorizationChecker: async (action: Action, roles: string[]): Promise<boolean> => {\n        const token = action.request.headers[\"authorization\"];\n\n        if (!token)\n            return false;\n\n        return await Utils.verifyJwtAsync(token).then((v) => {\n            return true;\n        }).catch((e) => {\n            return false;\n        });\n    },\n\n    controllers: [\n        DummyController,\n      //  UserController,\n        AuthController,\n        CollabController\n    ]\n\n};\n\nconst koaApp = createKoaServer(koaOptions);\n\n\nkoaApp.listen(3000);\n\nconsole.log(\"Server is up and running at port 3000\");"]}