{"version":3,"file":"Instance.js","sourceRoot":"","sources":["../../../src/collab/Instance.ts"],"names":[],"mappings":"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","sourcesContent":["import {Mapping} from \"prosemirror-transform\";\nimport schema from \"./Schema\";\nimport {Comments} from \"./Comment\";\nimport {RedSightError} from \"../common/RedSightError\";\nimport {scheduleSave} from \"./Utils\";\n\nconst MAX_STEP_HISTORY = 10000;\n\nexport class Instance {\n    id: string;\n    steps: number[] = [];\n    users: any = Object.create(null);\n    collecting: any = null;\n    doc: any;\n    comments: Comments = new Comments();\n    lastActive: Date = new Date();\n    userCount: number = 0;\n    waiting: any[] = [];\n    version: number = 0;\n\n    constructor(id: string, doc: any, comments: Comments) {\n        this.id = id;\n        this.doc = doc || schema.node(\"doc\", null, [schema.node(\"paragraph\", null, [\n            schema.text(\"input\")\n        ])]);\n        comments = comments;\n    }\n\n    stop() {\n        if (this.collecting != null) clearInterval(this.collecting);\n    }\n\n    checkVersion(version: number): void {\n        if (version < 0 || version > this.version) {\n            let err = new RedSightError(\"Invalid version\" + version);\n            err.httpCode = 400;\n            throw err;\n        }\n    }\n\n    addEvents(version: number, steps: any[], comments: Comments, clientId: number): any {\n\n        this.checkVersion(version);\n        if (this.version !== version) return false;\n        let doc = this.doc, maps: any = [];\n\n        for (let i = 0; i < steps.length; i++) {\n            steps[i].clientID = clientId;\n            let result = steps[i].apply(doc);\n\n            if (!!result.doc && !!doc)\n                doc = result.doc;\n            maps.push(steps[i].getMap());\n        }\n\n        this.doc = doc;\n        this.version += steps.length;\n        this.steps = this.steps = this.steps.concat(steps);\n        if (this.steps.length > MAX_STEP_HISTORY) {\n            this.steps.slice(this.steps.length - MAX_STEP_HISTORY);\n        }\n\n        this.comments.mapThrough(new Mapping(maps));\n        if (comments && comments.comments)\n            for (let i = 0; i < comments.comments.length; i++) {\n                let event: any = comments.events[i];\n                if (event.type === \"delete\")\n                    this.comments.delete(event.id);\n                else\n                    this.comments.create(event);\n            }\n\n        while (this.waiting.length) this.waiting.pop().finish();\n\n        //  scheduleSave(this);\n        return {version: this.version, commentVersion: this.comments.version};\n    }\n\n    getEvents(version: number, commentVersion: number) {\n        this.checkVersion(version);\n        let startIndex = this.steps.length - (this.version - version);\n        if (startIndex < 0) return false;\n        let commentStartIndex = this.comments.events.length - (this.comments.version - commentVersion);\n        if (commentStartIndex < 0) return false;\n\n        return {\n            steps: this.steps.slice(startIndex),\n            comment: this.comments.eventsAfter(commentStartIndex),\n            users: this.userCount\n        };\n    }\n\n    collectUsers() {\n        this.users = Object.create(null);\n        this.userCount = 0;\n        this.collecting = null;\n        for (let i = 0; i < this.waiting.length; i++) {\n            this.registerUser(this.waiting[i].ip);\n        }\n    }\n\n    registerUser(ip: string) {\n        if (!(ip in this.users)) {\n            this.users[ip] = true;\n            this.userCount++;\n            if (this.collecting == null)\n                this.collecting = setTimeout(() => this.collectUsers(), 5000);\n        }\n    }\n}\n\n"]}