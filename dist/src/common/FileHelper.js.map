{"version":3,"file":"FileHelper.js","sourceRoot":"","sources":["../../../src/common/FileHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Service} from \"typedi\";\nimport {Stream, Writable, Readable} from \"stream\";\nconst azure = require(\"azure-storage\");\n\nexport interface IBlobSaveOptions {\n    streamLength?: number;\n    contentType: string;\n    compress?: boolean;\n    metadata?: any;\n}\n\nconst RESERVED_METADATA_KEYS = [\"type\", \"compressed\"];\n\n@Service()\nexport class FileHelper {\n\n    private readonly m_blobServer: any;\n    private readonly m_blobStorageContainerName: string;\n\n    constructor(@Inject(\"config\") private readonly m_config: any) {\n        this.m_blobServer = azure.createBlobService(m_config.get(\"azure.storageConnectString\"));\n        this.m_blobStorageContainerName = m_config.get(\"azure.blobStorageContainerName\");\n    }\n\n    async uploadFile(blobName: string, object: any, options?: IBlobSaveOptions) {\n        console.log(object);\n        let blobOptions: any = {\n            metadata: {}\n        };\n\n        if (options && options.metadata) {\n            for (let key in options.metadata) {\n                if (RESERVED_METADATA_KEYS.indexOf(key) !== -1) {\n                    continue;\n                }\n                blobOptions.metadata[key] = options.metadata[key];\n            }\n        }\n\n        let readableStream: any, readableStreamLength: number = 0;\n\n        if (object instanceof Stream) {\n            readableStream = object;\n\n            if (options && options.streamLength) {\n                readableStreamLength = options.streamLength;\n            }\n\n        }\n        if (object instanceof Buffer) {\n            readableStream = new Readable();\n            readableStream._read = () => {\n                readableStream.push(object);\n                readableStream.push(null);\n            }\n\n            readableStreamLength = (<Buffer>object).length;\n        }\n\n        blobOptions[\"contentType\"] = options.contentType;\n\n        if (options && options.compress) {\n            // todo\n        }\n\n        this.m_blobServer.createContainerIfNotExists(this.m_blobStorageContainerName, {publicAccessLevel: \"blob\"}, () => {\n        });\n        this.m_blobServer.createBlockBlobFromStream(this.m_blobStorageContainerName, blobName, readableStream, readableStreamLength, blobOptions, () => {\n        });\n    }\n\n    async readBolb(blobName: string, writableStrem: Writable): Promise<any> {\n        const blobStream = this.m_blobServer.getBlobToStream(this.m_blobStorageContainerName, blobName, writableStrem);\n        blobStream.pipe(writableStrem);\n    }\n\n\n    async delete(blobName: string): Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n            this.m_blobServer.deleteBlobIfExists(this.m_blobStorageContainerName, blobName, (err: any, result: boolean) => {\n                if (err)\n                    return reject(err);\n                resolve(result);\n            });\n        });\n    }\n}"]}