{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../../../src/collab/Utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {readFileSync, writeFile} from \"fs\";\nimport schema from \"./Schema\";\nimport {Comments, Comment} from \"./Comment\";\nimport {Instance} from \"./Instance\";\n\nlet instances = Object.create(null);\nlet instanceCount = 0;\nlet maxCount = 20;\n\nlet saveFile = __dirname + \"/demo-instances.json\", json: any;\nlet saveTimeout: any = null, saveEvery = 0;\n\nfunction getDocs() {\n    if (process.argv.indexOf(\"--fresh\") === -1) {\n        try {\n            json = JSON.parse(readFileSync(saveFile, \"utf8\"));\n        } catch (e) {\n        }\n    }\n\n    if (json) {\n        for (let prop in json)\n            newInstance(prop, schema.nodeFromJSON(json[prop].doc),\n                new Comments(json[prop].comments.map((c: any) => Comment.fromJson(c))));\n    }\n\n}\n\nfunction scheduleSave(instance: Instance) {\n    if (saveTimeout != null) return\n    saveTimeout = setTimeout(doSave, saveEvery, instance);\n}\nfunction doSave(instance: Instance) {\n\n    saveTimeout = null;\n    let out: any = {};\n\n    for (let prop in Instance)\n        out[prop] = {\n            doc: instances[prop].doc.toJSON(),\n            comments: instances[prop].comments\n        };\n    writeFile(saveFile, JSON.stringify(out));\n}\n\nfunction getInstance(id: string, ip: string) {\n    getDocs();\n    let inst = instances[id] || newInstance(id);\n    if (ip) inst.registerUser(ip)\n    inst.lastActive = new Date();\n    return inst;\n\n}\n\nfunction newInstance(id: string, doc?: any, comments?: any) {\n    if (++instanceCount > maxCount) {\n        let oldest = null;\n        for (let id in instances) {\n            let inst = instances[id];\n            if (!oldest || inst.lastActive < oldest.lastActive) oldest = inst;\n        }\n\n        // instances[oldest.id];\n        delete instances[oldest.id];\n\n        --instanceCount;\n    }\n    return instances[id] = new Instance(id, doc, comments);\n}\n\nfunction instanceInfo() {\n    getDocs();\n    let found = [];\n    for (let id in instances)\n        found.push({id: id, users: instances[id].userCount});\n    return found;\n}\n\nexport {getDocs, getInstance, instanceInfo, scheduleSave};"]}