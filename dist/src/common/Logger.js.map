{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../../src/common/Logger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAuC;AACvC,yBAAyB;AACzB,6BAA6B;AAC7B,mCAAmC;AACnC,qCAAkC;AAGlC,IAAa,MAAM,GAAnB;IAGI,YAA+C,QAAa;QAAb,aAAQ,GAAR,QAAQ,CAAK;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YACzB,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAE3B,MAAM,UAAU,GAAG;YACf,IAAI,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC;gBACnC,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC;gBAC3C,gBAAgB,EAAE,IAAI;gBACtB,+BAA+B,EAAE,IAAI;gBACrC,KAAK,EAAE,OAAO;gBACd,WAAW,EAAE,YAAY;gBACzB,OAAO,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE;gBACzB,OAAO,EAAE,IAAI;aAChB,CAAC;YACF,IAAI,OAAO,CAAC,UAAU,CAAC,eAAe,CAAC;gBACnC,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC;gBAC1C,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC;gBACnC,WAAW,EAAE,YAAY;gBACzB,OAAO,EAAE,IAAI,GAAG,IAAI,GAAG,EAAE;gBACzB,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,IAAI;aAChB,CAAC;SACL,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;IACrD,CAAC;IAEY,IAAI,CAAC,GAAG,IAAW;;YAC5B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;QAChC,CAAC;KAAA;IAEY,KAAK,CAAC,GAAG,IAAW;;YAC7B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QACjC,CAAC;KAAA;CAEJ,CAAA;AAzCY,MAAM;IADlB,gBAAO,EAAE;IAIO,WAAA,eAAM,CAAC,QAAQ,CAAC,CAAA;;GAHpB,MAAM,CAyClB;AAzCY,wBAAM","sourcesContent":["import {Service, Inject} from \"typedi\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as winston from \"winston\";\nimport\"winston-daily-rotate-file\";\n\n@Service()\nexport class Logger {\n    private m_logger: any;\n\n    constructor(@Inject(\"config\") private readonly m_config: any) {\n        const filePath = path.join(__dirname, \"..\", \"..\", \"logs\");\n        if (!fs.existsSync(filePath))\n            fs.mkdirSync(filePath);\n\n        const transports = [\n            new winston.transports.DailyRotateFile({\n                name: \"error\",\n                filename: path.join(filePath, \"_error.log\"),\n                handleExceptions: true,\n                humanReadableUnhandledException: true,\n                level: \"error\",\n                datePattern: \"yyyy-MM-dd\",\n                maxsize: 1024 * 1024 * 10,\n                prepend: true\n            }),\n            new winston.transports.DailyRotateFile({\n                name: \"info\",\n                filename: path.join(filePath, \"_info.log\"),\n                level: m_config.get(\"Logger.level\"),\n                datePattern: \"yyyy-MM-dd\",\n                maxsize: 1024 * 1024 * 10,\n                maxFiles: 7,\n                prepend: true\n            })\n        ];\n\n        this.m_logger = new winston.Logger({transports});\n    }\n\n    public async info(...args: any[]) {\n        this.m_logger.info(...args);\n    }\n\n    public async error(...args: any[]) {\n        this.m_logger.error(...args);\n    }\n\n}"]}