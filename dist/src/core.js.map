{"version":3,"file":"core.js","sourceRoot":"","sources":["../../src/core.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,4BAA0B,CAAE,uFAAuF;AACnH,qCAA4D;AAG5D,2DAAsD;AACtD,8CAA8C;AAC9C,4CAAwG;AACxG,+CAA0C;AAC1C,sDAA+E;AAC/E,gCAAgC;AAGhC;IACI,IAAI,QAAQ,GAAG,yBAAW,EAAE,CAAC;IAC7B,MAAM,CAAC;QACH,MAAM,EAAE,QAAQ;QAChB,cAAc,EAAE,QAAQ,CAAC,cAAc;QACvC,QAAQ,EAAE,CAAC,uBAAU,CAAC;KACzB,CAAC;AACN,CAAC;AAPD,oDAOC;AAED,4BAAmC,eAAwB;IACvD,IAAI,cAAc,GAAG,oBAAoB,EAAE,CAAC;IAC5C,IAAI,OAAO,GAAsB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE;QAC/D,cAAc,EAAE,cAAc,CAAC,cAAc,IAAI,eAAe;KACnE,CAAC,CAAC;IAEH,0BAAgB,CAAC,OAAO,CAAC;SACpB,IAAI,CAAC,UAAU;QACZ,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;IACtD,CAAC,CAAC;SACD,KAAK,CAAC,MAAM;QACT,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;AACX,CAAC;AAdD,gDAcC;AAED;IACI,MAAM,CAAC;QACH,mBAAmB,EAAE,KAAK;QAC1B,IAAI,EAAE,IAAI;QACV,gBAAgB,EAAE,IAAI;QACtB,kBAAkB,EAAE,CAAO,MAAc,EAAE,KAAW;YAClD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,IAAI,CAAC;YAExB,IAAI,WAAW,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC;QAE5B,CAAC,CAAA;QACD,oBAAoB,EAAE,CAAO,MAAc,EAAE,KAAe;YACxD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YAEtD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC;YAEjB,MAAM,CAAC,MAAM,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACP,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC,CAAC;QACP,CAAC,CAAA;QAED,WAAW,EAAE;YACT,kBAAe;YACf,iBAAc;YACd,iBAAc;YACd,mBAAgB;SACnB;QACD,WAAW,EAAE;YACT,8BAAgB;YAChB,qCAAuB;SAC1B;KACJ,CAAC;AACN,CAAC;AAtCD,sCAsCC","sourcesContent":["import \"reflect-metadata\";  // This package should be imported before `typedi`, `typeorm` and `routing-controllers`\nimport {ConnectionOptions, createConnection} from \"typeorm\";\nimport {Action, RoutingControllersOptions} from \"routing-controllers\";\n\nimport {UserEntity} from \"./data/entities/UserEntity\";\nimport * as webApiUtils from \"./webapi/utils\";\nimport {DummyController, UserController, AuthController, CollabController} from \"./webapi/controllers/\";\nimport {getDbConfig} from \"./sys-configs\";\nimport {LoggerMiddleware, ResultWarpperMiddleware} from \"./webapi/middlewares\";\n// import \"./common/HttpHelper\";\n\n\nexport function getConnectionOptions(): ConnectionOptions {\n    let dbConfig = getDbConfig();\n    return {\n        driver: dbConfig,\n        autoSchemaSync: dbConfig.autoSchemaSync,\n        entities: [UserEntity]\n    };\n}\n\nexport function initializeDatabase(forceSchemaSync: boolean): void {\n    let defaultOptions = getConnectionOptions();\n    let options: ConnectionOptions = Object.assign({}, defaultOptions, {\n        autoSchemaSync: defaultOptions.autoSchemaSync || forceSchemaSync\n    });\n\n    createConnection(options)\n        .then(connection => {\n            console.log(\"The database has been initialized.\");\n        })\n        .catch(reason => {\n            console.log(\"The database cannot be connected:\");\n            console.log(reason);\n        });\n}\n\nexport function getKoaOptions(): RoutingControllersOptions {\n    return {\n        defaultErrorHandler: false,\n        cors: true,\n        classTransformer: true,\n        currentUserChecker: async (action: Action, value?: any) => {\n            const token = action.request.headers[\"authorization\"];\n\n            if (!token) return null;\n\n            let decodeToken = await webApiUtils.verifyJwt(token);\n            return decodeToken.data;\n\n        },\n        authorizationChecker: async (action: Action, roles: string[]): Promise<boolean> => {\n            const token = action.request.headers[\"authorization\"];\n\n            if (!token)\n                return false;\n\n            return await webApiUtils.verifyJwt(token).then((v) => {\n                return true;\n            }).catch((e) => {\n                return false;\n            });\n        },\n\n        controllers: [\n            DummyController,\n            UserController,\n            AuthController,\n            CollabController\n        ],\n        middlewares: [\n            LoggerMiddleware,\n            ResultWarpperMiddleware\n        ]\n    };\n}\n"]}