{"version":3,"file":"UserUtils.js","sourceRoot":"","sources":["../../../../src/data/utils/UserUtils.ts"],"names":[],"mappings":";;AAAA,4DAAuD;AAEvD;IACI,MAAM,CAAC,YAAY,CAAC,SAAiB,EAAE,IAAa;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;YAAC,IAAI,GAAG,2BAAY,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,EAAC,QAAQ,EAAE,2BAAY,CAAC,eAAe,CAAC,2BAAY,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,EAAC,CAAC;IACxG,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,SAAiB,EAAE,QAAgB,EAAE,cAAsB;QAC7E,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC;IAC9E,CAAC;CACJ;AATD,8BASC","sourcesContent":["import {CryptoHelper} from \"../../common/CryptoHelper\";\n\nexport class UserUtils {\n    static signPassword(plainText: string, salt?: string): { password: string, salt: string } {\n        if (!salt) salt = CryptoHelper.genRandomString(16);\n        return {password: CryptoHelper.genBase64String(CryptoHelper.genHashsString(plainText, salt)), salt};\n    }\n\n    static verifyPassword(plainText: string, password: string, passwordFormat: string): boolean {\n        return this.signPassword(plainText, passwordFormat).password === password;\n    }\n}"]}