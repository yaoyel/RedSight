{"version":3,"file":"UserController.js","sourceRoot":"","sources":["../../../../src/webapi/controllers/UserController.ts"],"names":[],"mappings":"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","sourcesContent":["import \"reflect-metadata\";\nimport {Get, Post, Body, JsonController, Param, HttpCode, UploadedFile, BadRequestError, Res} from \"routing-controllers\";\nimport {Service} from \"typedi\";\nimport {OrmCustomRepository} from \"typeorm-typedi-extensions\";\nimport {UserRepository} from \"../../data/UserRepository\";\nimport {UserEntity} from \"../../data/entities/UserEntity\";\nimport {CreateUserModel} from \"../../data/models/CreateUserModel\";\nimport {SmsServerHelper} from \"../../common/SmsServerHelper\";\nimport {Checker} from \"../../common/Checkers\";\nimport * as sharp from \"sharp\";\nimport {FileHelper} from \"../../common/FileHelper\";\nimport {UserModel} from \"../models/UserModel\";\nimport {RedSightError} from \"../../common/RedSightError\";\n\n@Service()\n@JsonController()\nexport class UserController {\n    constructor(@OrmCustomRepository(UserRepository)\n                private readonly m_userRepository: UserRepository,\n                private readonly m_smsServer: SmsServerHelper,\n                private readonly m_fileHelper: FileHelper) {\n    }\n\n    @Get(\"/users/findbyphonenumber/:phonenumber\")\n    public async findByPhoneNumber(@Param(\"phonenumber\") phoneNumber: string): Promise<UserModel> {\n        const user = await this.m_userRepository.findByPhoneNumber(phoneNumber);\n\n        let result = new UserModel().assignFrom(user);\n        return result;\n    }\n\n    @HttpCode(201)\n    @Post(\"/users\")\n    public async createUserAsync(@Body() user: CreateUserModel): Promise<UserModel> {\n        const checker = new Checker<UserEntity, UserRepository>();\n        await checker.existCheck({phoneNumber: user.phoneNumber}, this.m_userRepository, `已经存在手机号码为${user.phoneNumber}的用户`);\n        const userEntity = await this.m_userRepository.createUserAsync(user);\n        let result = new UserModel().assignFrom(userEntity);\n        return result;\n    }\n\n    @Post(\"/users/resetpasswrod/:phonenumber/:newpassword\")\n    public async resetPassword(@Param(\"phonenumber\")phoneNumber: string, @Param(\"newpassword\")newPassword: string) {\n        const checker = new Checker<UserEntity, UserRepository>();\n        const user = await checker.notExistCheck({phoneNumber}, this.m_userRepository, `不存在手机号为${phoneNumber}的用户。`, true);\n\n        await this.m_userRepository.resetPasswordAsync((<UserEntity>user), newPassword);\n\n    }\n\n    @Post(\"/users/changeName\")\n    public async changeName(@Body() args: { userId: string, name: string }) {\n        const checker = new Checker<UserEntity, UserRepository>();\n        const result = await checker.notExistCheck({Id: args.userId}, this.m_userRepository, `用户不存在`, true);\n        const user = (<UserEntity>result);\n        user.name = name;\n        await this.m_userRepository.updateUserAsync(user);\n    }\n\n    @Post(\"/users/requestsmscode/:phonenumber\")\n    public async requestSmsCode(@Param(\"phonenumber\")phoneNumber: string): Promise<boolean> {\n        return this.m_smsServer.RequestSmsCode(phoneNumber);\n    }\n\n    @Post(\"/users/veritysmscode/:phonenumber/:smscode\")\n    public async veritySmsCode(@Param(\"phonenumber\") phoneNumber: string, @Param(\"smscode\") smsCode: string): Promise<boolean> {\n        return this.m_smsServer.VeritySmsCode(phoneNumber, smsCode);\n    }\n\n\n    @Post(\"/users/checkbyphonenumber/:phoneNumber\")\n    public async checkByPhoneNumber(@Param(\"phoneNumber\") phoneNumber: string) {\n        const checker = new Checker<UserEntity, UserRepository>();\n        return await checker.notExistCheck({phoneNumber}, this.m_userRepository, `不存在手机号为${phoneNumber}的用户。`, true);\n        // return checker.Check({phoneNumber}, this.m_userRepository);\n    }\n\n    @Post(\"/users/checkbyname/:name\")\n    public async checkByPhoneName(@Param(\"name\") name: string) {\n        const checker = new Checker<UserEntity, UserRepository>();\n        return checker.notExistCheck({name}, this.m_userRepository, `不存在姓名为${name}的用户。`, false);\n    }\n\n    @Post(\"/users/updateavatar/:id\")\n    @HttpCode(201)\n    public async updateAvatar(@UploadedFile(\"file\")file: any, @Param(\"id\")id: string, @Res() res: any): Promise<boolean | BadRequestError> {\n        if (!file)\n            return new BadRequestError(\"请传入正确的文件\")\n        const contentType = {contentType: \"image/png\"};\n\n        await this.m_fileHelper.uploadFile(`avatar/${id}.jpg`, file.buffer, contentType);\n        await this.m_fileHelper.uploadFile(`avatar/100*100/${id}.jpg`, await sharp(file.buffer).resize(100).toBuffer(), contentType);\n        await this.m_fileHelper.uploadFile(`avatar/30*30/${id}.jpg`, await sharp(file.buffer).resize(30).toBuffer(), contentType);\n\n        return true;\n    }\n}"]}