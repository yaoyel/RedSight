{"version":3,"file":"CryptoHelper.js","sourceRoot":"","sources":["../../../src/common/CryptoHelper.ts"],"names":[],"mappings":";;AAAA,mCAA+C;AAE/C;IACI,MAAM,CAAC,eAAe,CAAC,MAAc;QACjC,MAAM,CAAC,oBAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACpC,QAAQ,CAAC,KAAK,CAAC;aACf,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,SAAiB;QACpC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,SAAiB,EAAE,IAAY;QACjD,IAAI,IAAI,GAAG,mBAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;CACJ;AAjBD,oCAiBC","sourcesContent":["import {randomBytes, createHmac} from \"crypto\";\n\nexport class CryptoHelper {\n    static genRandomString(length: number): string {\n        return randomBytes(Math.ceil(length / 2))\n            .toString(\"hex\")\n            .slice(0, length);\n    }\n\n    static genBase64String(plainText: string): string {\n        return new Buffer(plainText).toString(\"base64\");\n    }\n\n    static genHashsString(plainText: string, salt: string): string {\n        let hash = createHmac(\"sha512\", salt);\n        hash.update(plainText);\n        let value = hash.digest(\"hex\");\n        return value;\n    }\n}"]}