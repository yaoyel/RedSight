{"version":3,"file":"CollabController.js","sourceRoot":"","sources":["../../../../src/webapi/controllers/CollabController.ts"],"names":[],"mappings":"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","sourcesContent":["import {Request, Response} from \"koa\";\nimport {Step} from \"prosemirror-transform\";\nimport  schema from \"../../collab/Schema\";\nimport { getInstance, instanceInfo} from \"../../collab/Utils\";\nimport {JsonController, Get, Post, Param, Req, BadRequestError, QueryParam, Res, Body} from \"routing-controllers\";\nimport {RedSightError} from \"../../common/RedSightError\";\nimport {Comments} from \"../../collab/Comment\";\n\nexport class CollabController {\n    constructor() {\n    }\n\n    @Get(\"/docs\")\n    public async docs() {\n        return instanceInfo();\n    }\n\n    @Get(\"/docs/:id\")\n    public async getDocsFromId(\n        @Param(\"id\")id: string,\n        @Req() request: Request\n    ) {\n        let ip = this.reqIp(request);\n        let inst = getInstance(id, ip);\n        if (!inst.comments) {\n            inst.comments = new Comments();\n        }\n\n        return {\n            doc: inst.doc.toJSON(),\n            users: inst.userCount,\n            version: inst.version,\n            comments: inst.comments.comments,\n            commentVersion: inst.comments.version\n        };\n    }\n\n    @Get(\"/docs/events/:id\")\n    public async events(\n        @Req() req: Request,\n        @Res() resp: Response,\n        @Param(\"id\")id: string,\n        @QueryParam(\"version\") ver: string,\n        @QueryParam(\"commentVersion\") commentVer: string\n    ) {\n        let version = this.nonNegInteger(ver);\n        let commentVersion = this.nonNegInteger(commentVer);\n        let inst = getInstance(id, this.reqIp(req));\n\n        let data = inst.getEvents(version, commentVersion);\n        if (data === false)\n            return new RedSightError(\"history no longer availbale\");\n\n        if (data.steps.length || data.comment.length)\n            return this.outputEvents(inst, data);\n\n        // let wait=new Waiting(resp,inst,this.reqIp(req),()=>{\n        //     wait.send(this.outputEvents(inst,inst.getEvents(version,commentVersion)))\n        // });\n        //\n        // inst.waiting.push(wait);\n        //  resp.distory(\"close\",()=>wait.abort());\n    }\n\n    @Post(\"/docs/events/:id\")\n    public async postEvent(\n        @Param(\"id\") id: string,\n        @Body() data: any,\n        @Req() req: Request\n    ) {\n        let version = this.nonNegInteger(data.version);\n        console.log(data.steps);\n        let steps = data.steps.map((s: any) => Step.fromJSON(schema, s));\n        let instance = getInstance(id, this.reqIp(req));\n\n\n        console.log(steps);\n        let result = instance.addEvents(version, steps, data.comment, data.clientID);\n\n        if (!result)\n            return new RedSightError(\"Version not current\");\n        return result;\n    }\n\n    private reqIp(request: Request) {\n        return request.headers[\"x-forwarded-for\"] || request.socket.remoteAddress;\n    }\n\n    private nonNegInteger(ver: string) {\n        let num = Number(ver)\n        if (!isNaN(num) && Math.floor(num) === num && num >= 0) return num\n        throw new BadRequestError(\"Not a non-negative integer: \" + ver);\n    }\n\n    private outputEvents(inst: any, data: any) {\n        return {\n            version: inst.version,\n            commentVersion: inst.comments.version,\n            steps: data.steps.map((s: any) => s.toJSON()),\n            clientIDs: data.steps.map((step: any) => step.clientID),\n            comment: data.comment\n        };\n    }\n\n}\n"]}